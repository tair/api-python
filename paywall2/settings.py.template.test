#Copyright 2015 Phoenix Bioinformatics Corporation. All rights reserved.





"""
Django settings for paywall2 project.

For more information on this file, see
https://docs.djangoproject.com/en/1.7/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.7/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
BASE_DIR = os.path.dirname(os.path.dirname(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#-4)vm=f8fm#adsgno$d%2^df31zd@_eisul(x!yk^ygbidvf*'

STRIPE_PUBLIC_KEY = 'pk_test_VEu0r74glZkzeT8IXLmXxojP'

STRIPE_PRIVATE_KEY = 'sk_test_dXy85QkwH66s64bIWKbikyMt'

HOSTNAME = 'http://localhost:9000/'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader'
            ],
        }
    }
]

# Add error email setting
ADMINS = [('Phoenix', 'techteam@arabidopsis.org'), ('Dev', 'dev@arabidopsis.org'), ('Xingguo', 'xingguo.chen@arabidopsis.org')]
SERVER_EMAIL = 'dev@arabidopsis.org' # override the email address that error messages come from

TEST_RUNNER = 'common.utils.test_runner.NoLoggingTestRunner'

LOGGING = {
    'version': 1,
    'formatters': {
        # more formatter syntax on 
        # https://docs.python.org/3/library/logging.html#logrecord-attributes
        'simple': {
            'format': '%(asctime)s %(message)s'
        },
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(message)s'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'api_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/var/log/api/api.log',
            'formatter': 'simple'
        },
        'request_log': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': '/var/log/api/request_error.log',
            'formatter': 'standard'
        },
        'security_log': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': '/var/log/api/security_error.log',
            'formatter': 'standard'
        },
        # override default config
        # see https://djangodeconstructed.com/2018/12/18/django-and-python-logging-in-plain-english/
        # https://github.com/django/django/blob/1939dd49d142b65fa22eb5f85cee0d20864d3730/django/utils/log.py#L18
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
        # 'sql_log': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': '/var/log/api/sql.log',
        #     'formatter': 'simple'
        # },
    },
    'loggers': {
        # api project
        'phoenix.api': {
            'handlers': ['api_log'],
            'propagate': True,
            'level': 'DEBUG',
        },
        # request error log
        'django.request': {
            'handlers': ['request_log'],
            'propagate': True,
            'level': 'WARNING',
        },
        # security alert log
        'django.security': {
            'handlers': ['security_log', 'mail_admins'],
            'propagate': True,
            'level': 'WARNING',
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO'
        },
        # SQL statement executed
        'django.db.backends': {
            # 'handlers': ['sql_log'],
            # 'propagate': True,
            # 'level': 'DEBUG',
        },
    }
}

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #REST APIs
    'rest_framework',
    #Other
    'corsheaders',
    #Custom Apps
    'metering',
    'subscription',
    'authorization',
    'partner',
    'party',
    'loggingapp',
    'apikey',
    'common',
    'authentication',
)

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny','common.permissions.ApiKeyPermission'),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

# CORS Setting to allow ui sites to access the API server
CORS_ORIGIN_WHITELIST = (
)

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'accept-encoding',
    'origin',
    'authorization',
    'x-csrftoken'
)

ROOT_URLCONF = 'paywall2.urls'

WSGI_APPLICATION = 'paywall2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.7/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': 'phoenix_api',
        'USER': 'phoenix',
        'PASSWORD': '',
        'HOST': 'phoenix-api-uat.cwyjt5kql77y.us-west-2.rds.amazonaws.com',
        'PORT': '3306',
        'OPTIONS': {
            'use_pure': True
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.7/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SECURE_CONTENT_TYPE_NOSNIFF = True

SECURE_BROWSER_XSS_FILTER = True

SESSION_COOKIE_SECURE = True

X_FRAME_OPTIONS = 'DENY'

CSRF_COOKIE_HTTPONLY = True

CSRF_COOKIE_SECURE = True

# These parameters enforces the entire domain to use SSL. Since testing
# is done via http, it is off for development, but need to turn ON for
# production.

#SECURE_SSL_REDIRECT = True

#SECURE_HSTS_SECONDS = 1

#SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.7/howto/static-files/

STATIC_URL = '/static/'

EMAIL_USE_TLS = True
EMAIL_HOST = 'email-smtp.us-west-2.amazonaws.com'
EMAIL_PORT = 25
# Fill in the username and password for emails.
# For AWS SES, this will be the username/password of the IAM created for SES.
EMAIL_HOST_USER = None
EMAIL_HOST_PASSWORD = None

# Credentials for CIPRES password decryption
CIPHER_CLIENT_SECRET = None
CIPHER_SALT = None
CIPHER_ITERATION = 200000 # 200,000
# Credentials for CIPRES API end point
CIPRES_API_BASE_URL = "https://ciprescibeta.ucsd.edu/portalrest/api"
CIPRES_BASIC_AUTH_TOKEN = None
CIPRES_ACCESS_TOKEN = None
# Email addresses for sending CIPRES sync failed email
CIPRES_ADMINS = ['techteam@arabidopsis.org']

# Fill in parameters for CyVerse API call
CYVERSE_DOMAIN = 'https://kc.cyverse.org/auth'
CYVERSE_REALM = 'CyVerse'
CYVERSE_CLIENT_ID = 'phoenix-bio'
CYVERSE_SECRET = None

# Email Subject for CyVerse purchase
CYVERSE_PURCHASE_EMAIL_SUBJECT = 'New Subscription Purchase'
CYVERSE_ADMINS = ['xingguo.chen@arabidopsis.org', 'support@cyverse.org']